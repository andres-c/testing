import { Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';
var Ng2FittextDirective = /** @class */ (function () {
    function Ng2FittextDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.minFontSize = 7;
        this.maxFontSize = 1000;
        /* Deprecated */
        this.useMaxFontSize = true;
        this.fontSize = 1000;
        this.speed = 1.05;
        this.done = false;
    }
    Ng2FittextDirective.prototype.setFontSize = function (fontSize) {
        if (this.isVisible() && !this.done) {
            if (fontSize < this.minFontSize) {
                fontSize = this.minFontSize;
            }
            if (fontSize > this.maxFontSize) {
                fontSize = this.maxFontSize;
            }
            this.fontSize = fontSize;
            return this.el.nativeElement.style.setProperty('font-size', (fontSize).toString() + 'px');
        }
    };
    Ng2FittextDirective.prototype.calculateFontSize = function (fontSize, speed) {
        return Math.floor(fontSize / speed);
    };
    Ng2FittextDirective.prototype.checkOverflow = function (parent, children) {
        var overflowX = children.scrollWidth - parent.clientWidth;
        var overflowY = children.clientHeight - parent.clientHeight;
        return (overflowX > 1 || overflowY > 1);
    };
    Ng2FittextDirective.prototype.onResize = function (event) {
        this.done = false;
        if (this.activateOnResize && this.fittext) {
            if (this.activateOnInputEvents && this.fittext) {
                this.setFontSize(this.getStartFontSizeFromHeight());
            }
            else {
                this.setFontSize(this.getStartFontSizeFromWeight());
            }
            this.ngAfterViewInit();
        }
    };
    Ng2FittextDirective.prototype.onInputEvents = function (event) {
        this.done = false;
        if (this.activateOnInputEvents && this.fittext) {
            this.setFontSize(this.getStartFontSizeFromHeight());
            this.ngAfterViewInit();
        }
    };
    Ng2FittextDirective.prototype.ngOnInit = function () {
        this.done = false;
        this.el.nativeElement.style.setProperty('will-change', 'content');
        this.ngAfterViewInit();
    };
    Ng2FittextDirective.prototype.ngAfterViewInit = function () {
        if (this.isVisible() && !this.done) {
            if (this.fittext) {
                var overflow = this.container ? this.checkOverflow(this.container, this.el.nativeElement)
                    : this.checkOverflow(this.el.nativeElement.parentElement, this.el.nativeElement);
                if (overflow) {
                    if (this.fontSize > this.minFontSize) {
                        // iterate only until font size is bigger than minimal value
                        this.setFontSize(this.calculateFontSize(this.fontSize, this.speed));
                        this.ngAfterViewInit();
                    }
                }
                else {
                    this.done = true;
                }
            }
        }
    };
    Ng2FittextDirective.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (changes.modelToWatch) {
            // change of model to watch - call ngAfterViewInit where is implemented logic to change size
            setTimeout(function () {
                _this.done = false;
                _this.setFontSize(_this.maxFontSize);
                _this.ngAfterViewInit();
            });
        }
    };
    Ng2FittextDirective.prototype.ngAfterViewChecked = function () {
        if (this.fontSize > this.minFontSize) {
            this.setFontSize(this.getStartFontSizeFromHeight());
            this.ngAfterViewInit();
        }
    };
    Ng2FittextDirective.prototype.getStartFontSizeFromHeight = function () {
        return this.container ? this.container.clientHeight : this.el.nativeElement.parentElement.clientHeight;
    };
    Ng2FittextDirective.prototype.getStartFontSizeFromWeight = function () {
        return this.container ? this.container.clientWidth : this.el.nativeElement.parentElement.clientWidth;
    };
    Ng2FittextDirective.prototype.isVisible = function () {
        return this.getStartFontSizeFromHeight() > 0;
    };
    Ng2FittextDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fittext]'
                },] },
    ];
    /** @nocollapse */
    Ng2FittextDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    Ng2FittextDirective.propDecorators = {
        fittext: [{ type: Input, args: ['fittext',] }],
        activateOnResize: [{ type: Input, args: ['activateOnResize',] }],
        container: [{ type: Input, args: ['container',] }],
        activateOnInputEvents: [{ type: Input, args: ['activateOnInputEvents',] }],
        minFontSize: [{ type: Input, args: ['minFontSize',] }],
        maxFontSize: [{ type: Input, args: ['maxFontSize',] }],
        useMaxFontSize: [{ type: Input, args: ['useMaxFontSize',] }],
        modelToWatch: [{ type: Input, args: ['modelToWatch',] }],
        onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }],
        onInputEvents: [{ type: HostListener, args: ['input', ['$event'],] }]
    };
    return Ng2FittextDirective;
}());
export { Ng2FittextDirective };
//# sourceMappingURL=/home/lorenzo/repos/lorenzo/ng2-fittext/directives/ng2-fittext.directive.js.map