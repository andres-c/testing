{"version":3,"file":"ng2-fittext.directive.js","sourceRoot":"","sources":["../src/directives/ng2-fittext.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    AfterViewChecked,\n    AfterViewInit,\n    Directive,\n    ElementRef, HostListener,\n    Input,\n    OnChanges,\n    OnInit,\n    Renderer2\n} from '@angular/core';\n\n@Directive({\n    selector: '[fittext]'\n})\nexport class Ng2FittextDirective implements AfterViewInit, OnInit, OnChanges, AfterViewChecked {\n\n    @Input('fittext') fittext: any;\n    @Input('activateOnResize') activateOnResize: boolean;\n    @Input('container') container: HTMLElement;\n    @Input('activateOnInputEvents') activateOnInputEvents: boolean;\n    @Input('minFontSize') minFontSize = 7;\n    @Input('maxFontSize') maxFontSize = 1000;\n\n    /* Deprecated */\n    @Input('useMaxFontSize') useMaxFontSize = true;\n\n    @Input('modelToWatch') modelToWatch: any;\n    private fontSize = 1000;\n    private speed = 1.05;\n    private done = false;\n\n    constructor(public el: ElementRef,\n                public renderer: Renderer2) {}\n\n    setFontSize(fontSize: number) {\n        if (this.isVisible() && !this.done) {\n            if (fontSize < this.minFontSize) {\n                fontSize = this.minFontSize;\n            }\n            if(fontSize > this.maxFontSize){\n                fontSize = this.maxFontSize;\n            }\n\n            this.fontSize = fontSize;\n            return this.el.nativeElement.style.setProperty('font-size', (fontSize).toString() + 'px');\n        }\n    }\n\n    calculateFontSize(fontSize: number, speed: number) {\n        return Math.floor(fontSize / speed);\n    }\n\n    checkOverflow(parent: any, children: any) {\n        const overflowX = children.scrollWidth - parent.clientWidth;\n        const overflowY = children.clientHeight - parent.clientHeight;\n        return (overflowX > 1 || overflowY > 1);\n    }\n\n    @HostListener('window:resize', ['$event'])\n    onResize(event: Event) {\n        this.done = false;\n        if (this.activateOnResize && this.fittext) {\n            if (this.activateOnInputEvents && this.fittext) {\n                this.setFontSize(this.getStartFontSizeFromHeight());\n            } else {\n                this.setFontSize(this.getStartFontSizeFromWeight());\n            }\n\n            this.ngAfterViewInit();\n        }\n    }\n\n    @HostListener('input', ['$event'])\n    onInputEvents(event: Event) {\n        this.done = false;\n        if (this.activateOnInputEvents && this.fittext) {\n            this.setFontSize(this.getStartFontSizeFromHeight());\n            this.ngAfterViewInit();\n        }\n    }\n\n    ngOnInit() {\n        this.done = false;\n        this.el.nativeElement.style.setProperty('will-change', 'content');\n        this.ngAfterViewInit();\n    }\n\n    ngAfterViewInit() {\n        if (this.isVisible() && !this.done) {\n            if (this.fittext) {\n                const overflow = this.container ? this.checkOverflow(this.container, this.el.nativeElement)\n                    : this.checkOverflow(this.el.nativeElement.parentElement, this.el.nativeElement);\n                if (overflow) {\n                    if (this.fontSize > this.minFontSize) {\n                        // iterate only until font size is bigger than minimal value\n                        this.setFontSize(this.calculateFontSize(this.fontSize, this.speed));\n                        this.ngAfterViewInit();\n                    }\n                } else {\n                    this.done = true;\n                }\n            }\n        }\n    }\n\n    ngOnChanges(changes: any): void {\n        if (changes.modelToWatch) {\n            // change of model to watch - call ngAfterViewInit where is implemented logic to change size\n            setTimeout(() => {\n                this.done = false;\n                this.setFontSize(this.maxFontSize);\n                this.ngAfterViewInit();\n            });\n        }\n    }\n\n    ngAfterViewChecked() {\n        if (this.fontSize > this.minFontSize) {\n            this.setFontSize(this.getStartFontSizeFromHeight());\n            this.ngAfterViewInit();\n        }\n    }\n\n    private getStartFontSizeFromHeight(): number {\n        return this.container ? this.container.clientHeight : this.el.nativeElement.parentElement.clientHeight;\n    }\n\n    private getStartFontSizeFromWeight(): number {\n        return this.container ? this.container.clientWidth : this.el.nativeElement.parentElement.clientWidth;\n    }\n\n    private isVisible(): boolean {\n        return this.getStartFontSizeFromHeight() > 0;\n    }\n}\n"]}